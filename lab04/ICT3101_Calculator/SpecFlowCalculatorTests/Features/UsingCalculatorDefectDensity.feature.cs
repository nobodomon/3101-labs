// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecFlowCalculatorTests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("UsingCalculatorDefectDensity")]
    public partial class UsingCalculatorDefectDensityFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "UsingCalculatorDefectDensity.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "UsingCalculatorDefectDensity", "    In order to calculate the Logarithmic Musa model\'s failures/intensities\r\n    " +
                    "As a Software Quality Metric enthusiast\r\n    I want to use my calculator to do t" +
                    "his", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calculate the Defect Density of a system")]
        [NUnit.Framework.CategoryAttribute("DefectDensity")]
        [NUnit.Framework.TestCaseAttribute("100", "10", "10", null)]
        [NUnit.Framework.TestCaseAttribute("0", "10", "\"Number of defects cant be less than or equal 0\"", null)]
        [NUnit.Framework.TestCaseAttribute("100", "0", "\"KLOC cant be less than or equal 0\"", null)]
        [NUnit.Framework.TestCaseAttribute("0", "0", "\"Number of defects and KLOC cannot be less than or equal to 0\"", null)]
        public void CalculateTheDefectDensityOfASystem(string number_Of_Defects, string kLOC, string defect_Density, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "DefectDensity"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("number_of_defects", number_Of_Defects);
            argumentsOfScenario.Add("KLOC", kLOC);
            argumentsOfScenario.Add("defect_density", defect_Density);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate the Defect Density of a system", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 7
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
        testRunner.Given("I have a calculator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 9
        testRunner.When(string.Format("I have entered {0}, {1} into the calculator and press Defect Density", number_Of_Defects, kLOC), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 10
        testRunner.Then(string.Format("the defect density result should be {0}", defect_Density), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calculate the new SSI")]
        [NUnit.Framework.CategoryAttribute("NewSSI")]
        [NUnit.Framework.TestCaseAttribute("100", "20", "10", "10", "108", null)]
        [NUnit.Framework.TestCaseAttribute("0", "10", "10", "-1", "\"Deleted Code cant be less than 0\"", null)]
        [NUnit.Framework.TestCaseAttribute("100", "0", "-1", "10", "\"Percent of Changed Lines cant be less than 0\"", null)]
        [NUnit.Framework.TestCaseAttribute("100", "-1", "0", "10", "\"New release KLOC cant be less than 0\"", null)]
        [NUnit.Framework.TestCaseAttribute("-1", "10", "10", "0", "\"Previous release KLOC cant be less than 0\"", null)]
        [NUnit.Framework.TestCaseAttribute("-1", "-1", "-1", "-1", "\"Previous release KLOC, New release KLOC, Percent of Changed Lines, Deleted Code " +
            "cant be less than 0\"", null)]
        [NUnit.Framework.TestCaseAttribute("0", "0", "120", "0", "\"Percent of Changed Lines cant be more than 100%\"", null)]
        public void CalculateTheNewSSI(string previous_Release_KLOC, string new_Release_KLOC, string percent_Changed_Lines, string deleted_Code, string new_SSI, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "NewSSI"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("previous_release_KLOC", previous_Release_KLOC);
            argumentsOfScenario.Add("new_release_KLOC", new_Release_KLOC);
            argumentsOfScenario.Add("percent_changed_lines", percent_Changed_Lines);
            argumentsOfScenario.Add("deleted_code", deleted_Code);
            argumentsOfScenario.Add("new_SSI", new_SSI);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate the new SSI", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 20
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 21
        testRunner.Given("I have a calculator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 22
        testRunner.When(string.Format("I have entered {0}, {1}, {2}, {3} into the calculator and press New SSI", previous_Release_KLOC, new_Release_KLOC, percent_Changed_Lines, deleted_Code), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 23
        testRunner.Then(string.Format("the new SSI result should be {0}", new_SSI), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
