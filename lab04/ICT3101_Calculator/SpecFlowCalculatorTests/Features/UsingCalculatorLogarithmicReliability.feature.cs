// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecFlowCalculatorTests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("UsingCalculatorLogarithmicReliability")]
    public partial class UsingCalculatorLogarithmicReliabilityFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "UsingCalculatorLogarithmicReliability.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "UsingCalculatorLogarithmicReliability", "    In order to calculate the Logarithmic Musa model\'s failures/intensities\r\n    " +
                    "As a Software Quality Metric enthusiast\r\n    I want to use my calculator to do t" +
                    "his", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calculate the Logarithmic Musa model\'s failures/intensities")]
        [NUnit.Framework.CategoryAttribute("LogarithmicFailureIntensity")]
        [NUnit.Framework.TestCaseAttribute("10", "50", "0.02", "3.68", null)]
        [NUnit.Framework.TestCaseAttribute("0", "10", "1000", "\"Initial failure intensity cant be less than or equal 0\"", null)]
        [NUnit.Framework.TestCaseAttribute("100", "0", "1000", "\"Number of failures at time t cant be less than or equal 0\"", null)]
        [NUnit.Framework.TestCaseAttribute("100", "10", "0", "\"Decay Parameter cant be less than or equal 0\"", null)]
        [NUnit.Framework.TestCaseAttribute("0", "0", "0", "\"Initial failure intensity, number of failures at time t and decay parameter cann" +
            "ot be less than or equal to 0\"", null)]
        public void CalculateTheLogarithmicMusaModelsFailuresIntensities(string initial_Failure_Intensity, string number_Of_Failures_At_Time_T, string decay_Parameter, string failure_Intensity, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "LogarithmicFailureIntensity"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("initial_failure_intensity", initial_Failure_Intensity);
            argumentsOfScenario.Add("number_of_failures_at_time_t", number_Of_Failures_At_Time_T);
            argumentsOfScenario.Add("decay_parameter", decay_Parameter);
            argumentsOfScenario.Add("failure_intensity", failure_Intensity);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate the Logarithmic Musa model\'s failures/intensities", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 7
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
        testRunner.Given("I have a calculator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 9
        testRunner.When(string.Format("I have entered {0}, {1}, {2} into the calculator and press Logarithmic Failure In" +
                            "tensity", initial_Failure_Intensity, number_Of_Failures_At_Time_T, decay_Parameter), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 10
        testRunner.Then(string.Format("the Failure Intensity result should be {0}", failure_Intensity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calculate the Logarithmic Average number of expected failures")]
        [NUnit.Framework.CategoryAttribute("LogarithmicAverageNumberOfFailures")]
        [NUnit.Framework.TestCaseAttribute("0.02", "10", "10", "55", null)]
        [NUnit.Framework.TestCaseAttribute("0.02", "10", "100", "152", null)]
        [NUnit.Framework.TestCaseAttribute("0", "10", "1000", "\"Decay Parameter cant be less than or equal 0\"", null)]
        [NUnit.Framework.TestCaseAttribute("100", "0", "1000", "\"Initial failure intensity cant be less than or equal 0\"", null)]
        [NUnit.Framework.TestCaseAttribute("100", "10", "0", "\"Time t cant be less than or equal 0\"", null)]
        [NUnit.Framework.TestCaseAttribute("0", "0", "0", "\"Decay Parameter, initial failure intensity and time t cannot be less than or equ" +
            "al to 0\"", null)]
        public void CalculateTheLogarithmicAverageNumberOfExpectedFailures(string decay_Parameter, string initial_Failure_Intensity, string time_T, string average_Number_Of_Failures, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "LogarithmicAverageNumberOfFailures"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("decay_parameter", decay_Parameter);
            argumentsOfScenario.Add("initial_failure_intensity", initial_Failure_Intensity);
            argumentsOfScenario.Add("time_t", time_T);
            argumentsOfScenario.Add("average_number_of_failures", average_Number_Of_Failures);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate the Logarithmic Average number of expected failures", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 21
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 22
        testRunner.Given("I have a calculator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 23
        testRunner.When(string.Format("I have entered {0}, {1}, {2} into the calculator and press Logarithmic Average nu" +
                            "mber of expected failures", decay_Parameter, initial_Failure_Intensity, time_T), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 24
        testRunner.Then(string.Format("the average number of expected failures result should be {0}", average_Number_Of_Failures), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
